//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/NewInputSystemUnity/PlayerInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputs: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputs"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""df1a293c-ed4f-4f1e-a94e-ac59bda962a3"",
            ""actions"": [
                {
                    ""name"": ""Crouch"",
                    ""type"": ""PassThrough"",
                    ""id"": ""42fe676e-fe26-49c6-89ba-5eee5bb78a46"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Moving"",
                    ""type"": ""PassThrough"",
                    ""id"": ""49eda65d-ada1-4bff-9f47-bfe332feaf4b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GunOut"",
                    ""type"": ""Button"",
                    ""id"": ""676019db-37b6-47c5-a632-268f7100f6ea"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""ce102bfe-6bb5-4c41-ae66-a87e79f4647e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reload"",
                    ""type"": ""Button"",
                    ""id"": ""632b207c-4db6-411c-80e1-9ade0d879b47"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""593a094d-01ea-4d0d-9cdd-749a1f77458d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Skip"",
                    ""type"": ""Button"",
                    ""id"": ""b0457f35-4a7e-4991-bc46-90eae627335d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""08a3e816-0ffe-4222-b52e-9ba174186e1b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""dda29b60-4a79-4b82-ba94-87bfe7e02451"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f90c3143-0070-4c52-86b9-a9f1c7a20f2e"",
                    ""path"": ""<Touchscreen>/touch4/tap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touch"",
                    ""action"": ""GunOut"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""477bd11b-257b-4bbf-9ff4-7a54ee62c6b8"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GunOut"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5c544319-24f4-4728-a8bd-cd7f69a5ce68"",
                    ""path"": ""<Touchscreen>/touch1/tap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touch"",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""90bb85d1-e3e6-4df2-8fde-eb0f8770c52c"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8a61b0ab-eef6-45cf-92f1-f8539a37ce26"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Skip"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""13d81352-3c08-41e6-a4b4-133cebae22e0"",
                    ""path"": ""<Touchscreen>/touch8/tap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""133ccf97-d42e-46e3-9abb-b0a154cf8a14"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2bbb261c-e65b-4bff-944f-ed0935e57c0d"",
                    ""path"": ""<Touchscreen>/touch3/tap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touch"",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5b7203ff-2973-4bf0-9379-c57bb6c292d4"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eae3eedc-8196-4d32-8147-dfed6927d076"",
                    ""path"": ""<Touchscreen>/touch2/tap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Touch"",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""483efd1d-aec4-4b8d-b4d1-f9201beab7b5"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Minigames"",
            ""id"": ""eb77a7ba-a282-4d6d-b9e6-8c6ab5c3f225"",
            ""actions"": [
                {
                    ""name"": ""PlacePipe"",
                    ""type"": ""Button"",
                    ""id"": ""330a6cf2-201e-4a0c-888a-923f5118436b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Button"",
                    ""id"": ""71405c40-7c10-4626-80d2-2323ab4f022d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PlaceBentPipe"",
                    ""type"": ""Button"",
                    ""id"": ""a6d38f7a-d233-43a0-8e24-d2f13d7c43e3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ClickLockPick"",
                    ""type"": ""Button"",
                    ""id"": ""a7da4340-c763-488d-ac6d-f59875f2117a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ClickToTop"",
                    ""type"": ""Button"",
                    ""id"": ""59feef33-1e1f-4d39-bc78-5ecf2feb841c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseUp"",
                    ""type"": ""PassThrough"",
                    ""id"": ""a9d00ce9-506d-415b-94c9-b8235806f5eb"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DragWire"",
                    ""type"": ""Button"",
                    ""id"": ""5a8e879c-7ee8-48b3-bb13-1eecddd26e9c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Point"",
                    ""type"": ""Value"",
                    ""id"": ""a462131d-4418-42e7-880f-f30725213ce5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""DragAndMove"",
                    ""type"": ""Value"",
                    ""id"": ""0871f5c1-1de4-49b8-aebc-8c8ee9a09aad"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""9c1269e0-7cac-490e-96a1-167cbdd867a3"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlacePipe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""658d6cd0-d469-4abe-9d3e-ac69abb4de90"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""990c37ba-a279-429d-9c5b-3935bbbe6eaa"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PlaceBentPipe"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9ef0f3f6-abc4-4c83-8967-d90b71e1ae03"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ClickLockPick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""323a026d-bdd7-43f8-977f-405a5f586cf4"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ClickToTop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""284d441d-8946-498a-a76f-75a4547706af"",
                    ""path"": ""<Touchscreen>/Press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ClickToTop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b725dc6c-5a0f-4634-8f02-d3e5945aba0f"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""48f55e67-2e27-46d7-b63a-1ee20c93ce3d"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DragWire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""23592be4-40b1-4b8d-b7f5-3d77a0894ef3"",
                    ""path"": ""<Touchscreen>/touch*/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DragWire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""97dbc674-17c1-477f-b954-e593c8fa5a5e"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""98f00afe-3709-4f1b-8551-352090a708b5"",
                    ""path"": ""<Touchscreen>/touch*/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""09902fb0-49c7-4baf-835b-17d564293ef4"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DragAndMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0df21e8b-b5dc-491f-b761-426ed489e959"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DragAndMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""OnTilt"",
            ""id"": ""8d8fb079-d451-4e02-9dea-d4f26235cbe5"",
            ""actions"": [
                {
                    ""name"": ""Tilt"",
                    ""type"": ""Value"",
                    ""id"": ""eb4780a6-e4ae-4acc-a44d-11e2da2a3cb2"",
                    ""expectedControlType"": ""Quaternion"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""51ad4627-d0b3-4a78-bf12-bb1ec31f120a"",
                    ""path"": ""<AttitudeSensor>/attitude"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tilt"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": """",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": """",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Touch"",
            ""bindingGroup"": ""Touch"",
            ""devices"": [
                {
                    ""devicePath"": """",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Crouch = m_Player.FindAction("Crouch", throwIfNotFound: true);
        m_Player_Moving = m_Player.FindAction("Moving", throwIfNotFound: true);
        m_Player_GunOut = m_Player.FindAction("GunOut", throwIfNotFound: true);
        m_Player_Shoot = m_Player.FindAction("Shoot", throwIfNotFound: true);
        m_Player_Reload = m_Player.FindAction("Reload", throwIfNotFound: true);
        m_Player_Interact = m_Player.FindAction("Interact", throwIfNotFound: true);
        m_Player_Skip = m_Player.FindAction("Skip", throwIfNotFound: true);
        m_Player_Pause = m_Player.FindAction("Pause", throwIfNotFound: true);
        // Minigames
        m_Minigames = asset.FindActionMap("Minigames", throwIfNotFound: true);
        m_Minigames_PlacePipe = m_Minigames.FindAction("PlacePipe", throwIfNotFound: true);
        m_Minigames_MousePosition = m_Minigames.FindAction("MousePosition", throwIfNotFound: true);
        m_Minigames_PlaceBentPipe = m_Minigames.FindAction("PlaceBentPipe", throwIfNotFound: true);
        m_Minigames_ClickLockPick = m_Minigames.FindAction("ClickLockPick", throwIfNotFound: true);
        m_Minigames_ClickToTop = m_Minigames.FindAction("ClickToTop", throwIfNotFound: true);
        m_Minigames_MouseUp = m_Minigames.FindAction("MouseUp", throwIfNotFound: true);
        m_Minigames_DragWire = m_Minigames.FindAction("DragWire", throwIfNotFound: true);
        m_Minigames_Point = m_Minigames.FindAction("Point", throwIfNotFound: true);
        m_Minigames_DragAndMove = m_Minigames.FindAction("DragAndMove", throwIfNotFound: true);
        // OnTilt
        m_OnTilt = asset.FindActionMap("OnTilt", throwIfNotFound: true);
        m_OnTilt_Tilt = m_OnTilt.FindAction("Tilt", throwIfNotFound: true);
    }

    ~@PlayerInputs()
    {
        UnityEngine.Debug.Assert(!m_Player.enabled, "This will cause a leak and performance issues, PlayerInputs.Player.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Minigames.enabled, "This will cause a leak and performance issues, PlayerInputs.Minigames.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_OnTilt.enabled, "This will cause a leak and performance issues, PlayerInputs.OnTilt.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Crouch;
    private readonly InputAction m_Player_Moving;
    private readonly InputAction m_Player_GunOut;
    private readonly InputAction m_Player_Shoot;
    private readonly InputAction m_Player_Reload;
    private readonly InputAction m_Player_Interact;
    private readonly InputAction m_Player_Skip;
    private readonly InputAction m_Player_Pause;
    public struct PlayerActions
    {
        private @PlayerInputs m_Wrapper;
        public PlayerActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Crouch => m_Wrapper.m_Player_Crouch;
        public InputAction @Moving => m_Wrapper.m_Player_Moving;
        public InputAction @GunOut => m_Wrapper.m_Player_GunOut;
        public InputAction @Shoot => m_Wrapper.m_Player_Shoot;
        public InputAction @Reload => m_Wrapper.m_Player_Reload;
        public InputAction @Interact => m_Wrapper.m_Player_Interact;
        public InputAction @Skip => m_Wrapper.m_Player_Skip;
        public InputAction @Pause => m_Wrapper.m_Player_Pause;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Crouch.started += instance.OnCrouch;
            @Crouch.performed += instance.OnCrouch;
            @Crouch.canceled += instance.OnCrouch;
            @Moving.started += instance.OnMoving;
            @Moving.performed += instance.OnMoving;
            @Moving.canceled += instance.OnMoving;
            @GunOut.started += instance.OnGunOut;
            @GunOut.performed += instance.OnGunOut;
            @GunOut.canceled += instance.OnGunOut;
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
            @Reload.started += instance.OnReload;
            @Reload.performed += instance.OnReload;
            @Reload.canceled += instance.OnReload;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @Skip.started += instance.OnSkip;
            @Skip.performed += instance.OnSkip;
            @Skip.canceled += instance.OnSkip;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Crouch.started -= instance.OnCrouch;
            @Crouch.performed -= instance.OnCrouch;
            @Crouch.canceled -= instance.OnCrouch;
            @Moving.started -= instance.OnMoving;
            @Moving.performed -= instance.OnMoving;
            @Moving.canceled -= instance.OnMoving;
            @GunOut.started -= instance.OnGunOut;
            @GunOut.performed -= instance.OnGunOut;
            @GunOut.canceled -= instance.OnGunOut;
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
            @Reload.started -= instance.OnReload;
            @Reload.performed -= instance.OnReload;
            @Reload.canceled -= instance.OnReload;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @Skip.started -= instance.OnSkip;
            @Skip.performed -= instance.OnSkip;
            @Skip.canceled -= instance.OnSkip;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Minigames
    private readonly InputActionMap m_Minigames;
    private List<IMinigamesActions> m_MinigamesActionsCallbackInterfaces = new List<IMinigamesActions>();
    private readonly InputAction m_Minigames_PlacePipe;
    private readonly InputAction m_Minigames_MousePosition;
    private readonly InputAction m_Minigames_PlaceBentPipe;
    private readonly InputAction m_Minigames_ClickLockPick;
    private readonly InputAction m_Minigames_ClickToTop;
    private readonly InputAction m_Minigames_MouseUp;
    private readonly InputAction m_Minigames_DragWire;
    private readonly InputAction m_Minigames_Point;
    private readonly InputAction m_Minigames_DragAndMove;
    public struct MinigamesActions
    {
        private @PlayerInputs m_Wrapper;
        public MinigamesActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @PlacePipe => m_Wrapper.m_Minigames_PlacePipe;
        public InputAction @MousePosition => m_Wrapper.m_Minigames_MousePosition;
        public InputAction @PlaceBentPipe => m_Wrapper.m_Minigames_PlaceBentPipe;
        public InputAction @ClickLockPick => m_Wrapper.m_Minigames_ClickLockPick;
        public InputAction @ClickToTop => m_Wrapper.m_Minigames_ClickToTop;
        public InputAction @MouseUp => m_Wrapper.m_Minigames_MouseUp;
        public InputAction @DragWire => m_Wrapper.m_Minigames_DragWire;
        public InputAction @Point => m_Wrapper.m_Minigames_Point;
        public InputAction @DragAndMove => m_Wrapper.m_Minigames_DragAndMove;
        public InputActionMap Get() { return m_Wrapper.m_Minigames; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MinigamesActions set) { return set.Get(); }
        public void AddCallbacks(IMinigamesActions instance)
        {
            if (instance == null || m_Wrapper.m_MinigamesActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_MinigamesActionsCallbackInterfaces.Add(instance);
            @PlacePipe.started += instance.OnPlacePipe;
            @PlacePipe.performed += instance.OnPlacePipe;
            @PlacePipe.canceled += instance.OnPlacePipe;
            @MousePosition.started += instance.OnMousePosition;
            @MousePosition.performed += instance.OnMousePosition;
            @MousePosition.canceled += instance.OnMousePosition;
            @PlaceBentPipe.started += instance.OnPlaceBentPipe;
            @PlaceBentPipe.performed += instance.OnPlaceBentPipe;
            @PlaceBentPipe.canceled += instance.OnPlaceBentPipe;
            @ClickLockPick.started += instance.OnClickLockPick;
            @ClickLockPick.performed += instance.OnClickLockPick;
            @ClickLockPick.canceled += instance.OnClickLockPick;
            @ClickToTop.started += instance.OnClickToTop;
            @ClickToTop.performed += instance.OnClickToTop;
            @ClickToTop.canceled += instance.OnClickToTop;
            @MouseUp.started += instance.OnMouseUp;
            @MouseUp.performed += instance.OnMouseUp;
            @MouseUp.canceled += instance.OnMouseUp;
            @DragWire.started += instance.OnDragWire;
            @DragWire.performed += instance.OnDragWire;
            @DragWire.canceled += instance.OnDragWire;
            @Point.started += instance.OnPoint;
            @Point.performed += instance.OnPoint;
            @Point.canceled += instance.OnPoint;
            @DragAndMove.started += instance.OnDragAndMove;
            @DragAndMove.performed += instance.OnDragAndMove;
            @DragAndMove.canceled += instance.OnDragAndMove;
        }

        private void UnregisterCallbacks(IMinigamesActions instance)
        {
            @PlacePipe.started -= instance.OnPlacePipe;
            @PlacePipe.performed -= instance.OnPlacePipe;
            @PlacePipe.canceled -= instance.OnPlacePipe;
            @MousePosition.started -= instance.OnMousePosition;
            @MousePosition.performed -= instance.OnMousePosition;
            @MousePosition.canceled -= instance.OnMousePosition;
            @PlaceBentPipe.started -= instance.OnPlaceBentPipe;
            @PlaceBentPipe.performed -= instance.OnPlaceBentPipe;
            @PlaceBentPipe.canceled -= instance.OnPlaceBentPipe;
            @ClickLockPick.started -= instance.OnClickLockPick;
            @ClickLockPick.performed -= instance.OnClickLockPick;
            @ClickLockPick.canceled -= instance.OnClickLockPick;
            @ClickToTop.started -= instance.OnClickToTop;
            @ClickToTop.performed -= instance.OnClickToTop;
            @ClickToTop.canceled -= instance.OnClickToTop;
            @MouseUp.started -= instance.OnMouseUp;
            @MouseUp.performed -= instance.OnMouseUp;
            @MouseUp.canceled -= instance.OnMouseUp;
            @DragWire.started -= instance.OnDragWire;
            @DragWire.performed -= instance.OnDragWire;
            @DragWire.canceled -= instance.OnDragWire;
            @Point.started -= instance.OnPoint;
            @Point.performed -= instance.OnPoint;
            @Point.canceled -= instance.OnPoint;
            @DragAndMove.started -= instance.OnDragAndMove;
            @DragAndMove.performed -= instance.OnDragAndMove;
            @DragAndMove.canceled -= instance.OnDragAndMove;
        }

        public void RemoveCallbacks(IMinigamesActions instance)
        {
            if (m_Wrapper.m_MinigamesActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IMinigamesActions instance)
        {
            foreach (var item in m_Wrapper.m_MinigamesActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_MinigamesActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public MinigamesActions @Minigames => new MinigamesActions(this);

    // OnTilt
    private readonly InputActionMap m_OnTilt;
    private List<IOnTiltActions> m_OnTiltActionsCallbackInterfaces = new List<IOnTiltActions>();
    private readonly InputAction m_OnTilt_Tilt;
    public struct OnTiltActions
    {
        private @PlayerInputs m_Wrapper;
        public OnTiltActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Tilt => m_Wrapper.m_OnTilt_Tilt;
        public InputActionMap Get() { return m_Wrapper.m_OnTilt; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OnTiltActions set) { return set.Get(); }
        public void AddCallbacks(IOnTiltActions instance)
        {
            if (instance == null || m_Wrapper.m_OnTiltActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_OnTiltActionsCallbackInterfaces.Add(instance);
            @Tilt.started += instance.OnTilt;
            @Tilt.performed += instance.OnTilt;
            @Tilt.canceled += instance.OnTilt;
        }

        private void UnregisterCallbacks(IOnTiltActions instance)
        {
            @Tilt.started -= instance.OnTilt;
            @Tilt.performed -= instance.OnTilt;
            @Tilt.canceled -= instance.OnTilt;
        }

        public void RemoveCallbacks(IOnTiltActions instance)
        {
            if (m_Wrapper.m_OnTiltActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IOnTiltActions instance)
        {
            foreach (var item in m_Wrapper.m_OnTiltActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_OnTiltActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public OnTiltActions @OnTilt => new OnTiltActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_GamepadSchemeIndex = -1;
    public InputControlScheme GamepadScheme
    {
        get
        {
            if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
            return asset.controlSchemes[m_GamepadSchemeIndex];
        }
    }
    private int m_TouchSchemeIndex = -1;
    public InputControlScheme TouchScheme
    {
        get
        {
            if (m_TouchSchemeIndex == -1) m_TouchSchemeIndex = asset.FindControlSchemeIndex("Touch");
            return asset.controlSchemes[m_TouchSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnCrouch(InputAction.CallbackContext context);
        void OnMoving(InputAction.CallbackContext context);
        void OnGunOut(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnReload(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnSkip(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
    public interface IMinigamesActions
    {
        void OnPlacePipe(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
        void OnPlaceBentPipe(InputAction.CallbackContext context);
        void OnClickLockPick(InputAction.CallbackContext context);
        void OnClickToTop(InputAction.CallbackContext context);
        void OnMouseUp(InputAction.CallbackContext context);
        void OnDragWire(InputAction.CallbackContext context);
        void OnPoint(InputAction.CallbackContext context);
        void OnDragAndMove(InputAction.CallbackContext context);
    }
    public interface IOnTiltActions
    {
        void OnTilt(InputAction.CallbackContext context);
    }
}
